[gd_scene load_steps=4 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
func angular_velocity(angle):
	get_node(\"Cutter_Object\").angular_velocity(angle)
	
func cleanup():
	call_deferred(\"free\")
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="GDScript" id=2]
script/source = "extends KinematicBody2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
signal damaged(type)
signal stop_cutter

var normalised_v
var scale_v = 2
var connected = false
var target


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

func angular_velocity(angle):
	normalised_v = Vector2(cos(angle),sin(angle))
	position = position + normalised_v * 10
	rotate(angle + PI/2)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _physics_process(delta):
	var collision = move_and_collide(normalised_v * scale_v * delta)
	if collision:
		var collidername = collision.collider.name
		if connected:
			if collidername == \"RedCannon\" or collidername == \"BlueCannon\":
				self.connect(\"stop_cutter\", target, \"stopped_cutter\")
				emit_signal(\"stop_cutter\")
				connected = false
			elif collidername != \"wall\":
				self.connect(\"stop_cutter\", target, \"stopped_cutter\")
				emit_signal(\"stop_cutter\")
				connected = false
				get_parent().cleanup()
		else:
			if collidername == \"wall\":
				target = collision.collider
				self.connect(\"damaged\", target, \"damaged\")
				emit_signal(\"damaged\", \"cutter\")
				self.disconnect(\"damaged\", target, \"damaged\")
				connected = true
			elif not (collidername.begins_with(\"Cutter\") or collidername.begins_with(\"Driller\")) :
				get_parent().cleanup()
		#if collidername.begins_with(\"wall\"):
		#	pass # play wall animation
		#else:
		#	pass # play shot animation
	scale_v = scale_v*1.005
"

[sub_resource type="StreamTexture" id=3]
flags = 4
load_path = "res://.import/driller.png-d3b91f9db10b65dde8bff03d5a158f83.stex"

[node name="Cutter" type="Node2D"]
script = SubResource( 1 )

[node name="Cutter_Object" type="KinematicBody2D" parent="."]
script = SubResource( 2 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Cutter_Object"]
polygon = PoolVector2Array( 0, -30, 30, 30, -30, 30 )

[node name="driller" type="Sprite" parent="Cutter_Object"]
rotation = 1.74846e-07
scale = Vector2( 0.2, 0.2 )
texture = SubResource( 3 )
